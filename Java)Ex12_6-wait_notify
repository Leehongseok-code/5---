import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

class MyLabel extends JLabel
{
	private int barsize=0;
	private int maxbarsize;
	public MyLabel(int maxbarsize)
	{
		this.maxbarsize=maxbarsize;
	}
	public void paintComponent(Graphics g)
	{
		super.paintComponent(g);
		g.setColor(Color.MAGENTA);
		int width=(int)(((double)(this.getWidth()/maxbarsize*barsize)));
		if(width==0)return;
		g.fillRect(0, 0, width, this.getHeight());
	}
	synchronized void fill()
	{
		if (barsize==maxbarsize)
		{
			try 
			{
				wait();
			}
			catch(InterruptedException e) 
			{
				return;
			}
		}
		barsize++;
		repaint();
		notify();
	}
	synchronized void consume()
	{
		if(barsize==0)
		{
			try 
			{
				wait();
			}
			catch(InterruptedException e)
			{
				return;
			}
		}
		barsize--;
		repaint();
		notify();
	}
}
class ConsumerThread extends Thread
{
	private MyLabel bar;
	public ConsumerThread(MyLabel bar)
	{
		this.bar=bar;
	}
	public void run()
	{
		while(true)
		{
			try 
			{
				sleep(200);
				bar.consume();
			}
			catch(InterruptedException e)
			{
				return;
			}
		}
	}
}
public class Ex12_6 extends JFrame
{
	private MyLabel bar=new MyLabel(100);
	public Ex12_6(String title)
	{
		super(title);
		this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		Container c=getContentPane();
		c.setLayout(null);
		bar.setBackground(Color.ORANGE);
		bar.setOpaque(true);
		bar.setLocation(20,50);
		bar.setSize(300,20);
		c.add(bar);
		c.addKeyListener(new KeyAdapter() {
			public void keyPressed(KeyEvent e)
			{
				bar.fill();
			}
		});
		setSize(350,200);
		setVisible(true);
		c.setFocusable(true);
		c.requestFocus();
		ConsumerThread th=new ConsumerThread(bar);
		th.start();
	}
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		new Ex12_6("아무키나눌러 빨리채우기");
	}

}
